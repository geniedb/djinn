djinn is a stupid IRC bot written at GenieDB.

https://github.com/geniedb/djinn

An IRC bot that brings trac to IRC, runs a support channel, and a few other
useful things.
djinn was written by Andy Bennett <andyjpb@geniedb.com>


djinn now requires Python2.6

Setup & Configuration
=====================

You will probably want to copy geniedbot.py to a new file and then set then
edit things in the following way:

	The geniedbot.py file contains your site specific plugins at the top and
	your specific instantiations of those plugins that comprise your bot at
	the bottom.

	First scroll to the bottom of the file and edit the following line:

	warhead = djinn.IRCBot("localhost", "djinn", "djinn", "GenieBot")

	The parameters to the IRCBot constructor are:
		server, ident, nick, realname and, optionally, port.

	If djinn cannot obtain the nick that you specify underscores will be
	appended until the nick is successfully obtained. djinn will then
	periodically attempt to change its nick to the originally specified
	nick.

	Once you have your Bot, register the plugins that you require thusly:

	warhead.register_plugin(djinn.BasicPlugin())

	After the plugin registration comes the main loop which tries to keep
	the bot connected and registered with the server.

The plugins are:

	PrivmsgPlugin
		This pluging bestows the ability to recieve IRC PRIVMSGes. That
		is, messages from IRC channels or other IRC users. You probably
		don't want to instantiate this plugin directly, but if you want
		to write a plugin that accepts commands from a user then you
		probably want to subclass this.

	TicketPlugin
		This plugin resolves trac ticket number when djinn hears the
		ticket number being mentioned. When a ticket number is mentioned
		djinn looks the title up in trac and replies with it and a
		hyperlink to the ticket. This plugin only needs to be registered
		once and it will resolve ticket numbers in all channels that
		djinn joins and via private message.

		Set the trac tickets URL in the __init__ procedure of the
		TicketPlugin class. Set self.trac_tickets to the URL of the
		ticket section of your trac installation. You can find this out
		by viewing one of your trac tickets in your browser and then
		removing the last portion, including the slash. For example, if
		your ticket has a URL thusly:

		http://trac.edgewall.org/ticket/886

		Then self.trac_tickets should be:

		http://trac.edgewall.org/ticket


		The hyperlinks generated by this plugin can use a very simple
		URL shortner service. Here at GenieDB we arrange for
		http://short/gXXX (where X is a numerical digit) to be
		redirected to the appropriate trac ticket URL.
		If you have a similar capability, set self.shortner in the
		__init__ procedure to the URL base.

	BatsSpecPlugin
		A plugin that resolves bats specs for the form repo@commit, e.g mysql@andyjpb/master or xos@abc4567
		This plugin requires the djinn_gitlog helper script.
		You will want to customise the following variables in the
		plugin's __init__ procedure:

		self.git_root: The place where you keep your git repositories.
		               Here at GenieDB we keep them in
			       /export/git/<repo>/<team>.git and
			       /export/git/<user>/<repo>.git
		self.gitlog_bin: Where to find the djinn_gitlog helper script.

		This plugin assumes a lot about the structure of the directory
		hierarchy found at self.git_root. It's quite GenieDB specific
		and you probably want to do your own thing.

		You only need to register this plugin once and it will for for
		all channels djinn joins as well as user to user messages.

	QuenchPlugin
		A plugin that makes sure we don't say anything for 60 seconds
		in channels we've been told to "shutup" in.
		If you want quench functionality you only need to register this
		plugin once and it will work for all channels djinn joins.

	WarbotPlugin
		This plugin registers with a WarBot and then requests ops in
		all relevant channels. Special privileges are often required by
		the WaitingRoomPlugin plugin.

		You will want to customise the following variables in the
		plugin's __init__ procedure;

		self.warbot_nick: The name to send to the WarBot "auth" command.
		self.warbot_passwd: The password  to send to the WarBot "auth"
		                    command.

		WarBot can be obtained from https://github.com/alaricsp/warbot

	WorldDatePlugin
		This plugin calls an external script, wdate, and sends the
		output to the channel or user from whence the request
		originated.

		self.wdate_bin should be set to the script that you want to
		execute.

	WhereUserPlugin
		This plugin requires Westly Ward's ipinfodb.py library which is
		supplied as ipinfodb.py.
		This plugin tries to determine the geographical location of a
		user based on their whois information and Westly Ward's ipinfodb
		library.
		In order to use this plugin you will need to supply your own
		IPInfoDb.com API key.
		Insert your API key into the appropriate place on the following
		line in the plugin's __init__ procedure:
			self.IPInfo = ipinfodb.IPInfo("APIKEY") #API key

	TmpOpPlugin
		This plugin bestows channel operator mode bits to andyjpb in the
		channel #geniedb-support. The parameters are hardcoded but feel
		free to change things as you see fit. This is a quick-and-dirty
		plugin to aid with testing and debugging. You probably don't
		want to enable it in your bot.

	TmpDbgPlugin
		This plugin sends a copy of all personal messages that djinn
		recieves to the andyjpb nick. The parameters are hardcoded but
		feel free to change things as you see fit. This is a quick-and-
		dirty plugin to aid with testing and debugging. You probably
		don't want to enable it in your bot.

	ChannelPlugin
		This plugin causes djinn to join the channel specified.
		Instantiate this plugin thusly:

		warhead.register_plugin(StaffChannelPlugin("#geniedb"))

		Joining a channel with this plugin will allow djinn to provide
		services such as TicketPlugin and WorldDatePlugin in that
		channel.

	StaffChannelPlugin
		This is just a subclass fo the ChannelPlugin and does not
		currently add any extra functionality.

	WaitingRoomPlugin
		This is plugin is for using channels as "waiting rooms".
		Instantiate this plugin thusly:

		warhead.register_plugin(WaitingRoomPlugin("#geniedb-support", "#geniedb"))

		djinn will join the channel specified in the first argument and
		attempt to become an operator, set the topic, set the
		"moderated" bit and set the "auditorium" bit that means regular
		users can only see operators in the IRC NAMES list.
		When other users join djinn will announce them in the channel
		specified in the second argument.
		WaitingRoomPlugin channels are intended to be used as customer
		support channels. Usually a single customer support channel is
		advertised and as customers join, support staff can send IRC
		INVITEs to invite them into specific support channels. The
		channel is set up so that different customers cannot interact
		with each other whilst they are waiting.

		The full functionality of waiting rooms may require InspIRCd
		with appropriate modules enabled. djinn aquires the appropriate
		priviledges that are needed to set the channel mode bits by
		interacting with WarBot who looks after the IRC server that
		GenieDB uses. If you are using WarBot, you will need to
		configure and instantiate the WarbotPlugin. WarBot can be
		obtained here: https://github.com/alaricsp/warbot



Invocation & Installation
=========================

You can start djinn from the command line either like this:

	./geniedbot.py

...or like this:

	python geniedbot.py


At GenieDB we copied djinn.py and geniedbot to /usr/local/bin, set up a
specific user for djinn to run as and put the following in /etc/rc.local:

	su - djinn -s /bin/bash -c 'nohup /usr/local/bin/geniedbot.py >/dev/null 2>&1 &'


If you want to use the "World clock"/wdate functionality then you'll need to
ensure that djinn can find the wdate shell script on it's path. Here at GenieDB
we just copy it to /usr/local/bin along with djinn.py. You will also probably
want to modify the wdate script to include your choice of timezones.

If you want to use the BatsSpecPlugin you will need to ensure that djinn can
find the djinn_gitlog shell script on it's path. Here at GenieDB we just copy it
to /usr/local/bin along with djinn.py.

If you want to use the WhereUserPlugin then you'll need to ensure djinn can find
Westly Ward's ipinfodb.py library. Here at GenieDB we just copy it to
/usr/local/bin along with djinn.py


Integration With External Progams
=================================

djinn creates a fifo in /tmp/<ident>.<channel> for each channel that it joins.
When data appears in the fifo, say it in the appropriate channel. This allows
external programs to say things as djinn in IRC.

Here at GenieDB we run the djinn process under its own UID and GID and arrange
for the file system permissions on the fifo to be 660 (-rw-rw----). Process that
need to be able to speak as djinn are made members of the djinn group. They can
then speak in a channel thusly:

	if [ -p "/tmp/djinn.#geniedb" ]; then
		echo "Hello World" > "/tmp/djinn.#geniedb"
	fi

